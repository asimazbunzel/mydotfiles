snippet prog "Program Name" b

		program ${1:`!v expand('%:t:r')`}

		implicit none

		${2:${VISUAL}}

		end program ${1/([^\n$]+).*/$1/} $0
endsnippet

snippet mod "Module Name" b

		module ${1:`!v expand('%:t:r')`}

		implicit none

		contains

		${2:${VISUAL}}

		end module ${1/([^\n$]+).*/$1/} $0
endsnippet

snippet sub "Subroutine name" b
subroutine ${1:${VISUAL:SubroutineName}}($2)
	${3:${VISUAL}}
end subroutine ${1/([^\n$]+).*/$1/} $0
endsnippet

snippet fun "Function name" b
${1:`!v expand('%:t:r')`} function ${2:${VISUAL:FunctionName}}($3)
	${4:${VISUAL}}
end function ${2/([^\n$]+).*/$1/} $0
endsnippet

snippet proc
procedure (${1:${VISUAL:InterfaceName}})$2 :: ${3:${VISUAL:ProcedureName}} $0
endsnippet

snippet interf
interface ${1:${VISUAL:InterfaceName}}
	${2:${VISUAL}}
end interface $1
endsnippet

snippet if "if block" b
${1:<++name++>}if (${2:<++condition++>}) then
	${3:<++Start++>}
end if ${1/://} $0
endsnippet

snippet case "case block" b
select case (${1:${VISUAL}})
case (${2:${VISUAL}})
	${3:${VISUAL}}
case default
	${4:}
end select $0
endsnippet

snippet do "do loop" b
${1:<++name++>}do ${2:<++iter++>}=${3:<++start++>}, ${4:<++end++>}
	${5:<++loop++>}
end do ${1/://} $0
endsnippet

snippet dow "do while" b
${1:<++name++>}do while (${2:<++condition++>})
	${3:<++condition++>}
end do ${1/://} $0
endsnippet

snippet qw "quick write" Ab
write(${1:<++fp++>},${2:*}) ${3:<++stetement++>}
endsnippet

snippet qr "Read" Ab
read(${1:<++fp++>}, ${2:*}) ${3:<++statment++>}
endsnippet

snippet write "write" b
write(unit=${1:<++fp++>}${2:, file=${3:<++filename++>}${4:, iostat=${5:<++ierr++>}}}) ${6:<++statment++>}
endsnippet

snippet open "open file" b
open(unit=${1:<++fp++>}${2:, file=${3:<++filename++>}${4:, status=${5:<++unknown++>}${6:, iostat=${7:<++ierr++>}}}})
endsnippet

snippet close "close file" b
close(unit=${1:<++fp++>})
endsnippet

snippet integer "integer" Ab
integer :: ${1:variables}
endsnippet

snippet character "character variable" Ab
character (len=$1) :: ${2:variables}
endsnippet

snippet real "real variable" Ab
real($1) :: ${2:variables}
endsnippet

snippet dimension "dimension" A
dimension($1) $2
endsnippet

snippet parameter
parameter $1
endsnippet

snippet selectk "Select kind" A
selected_$1_kind($2)
endsnippet
